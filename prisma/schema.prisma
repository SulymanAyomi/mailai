// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    stripeSubscriptionId String?             @unique
    stripeSubscription   StripeSubscription? @relation(fields: [stripeSubscriptionId], references: [id])

    role Role @default(user)

    chatbotInteraction ChatbotInteraction?

    userAccounts UserAccount[]

    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserAccount {
    id     String @id @default(cuid())
    userId String

    binaryIndex Json?

    access_token String @unique
    provider     String
    emailAddress String @unique
    grant        String

    nextDeltaToken String?

    user           User           @relation(fields: [userId], references: [id])
    threads        Thread[]
    emailAddresses EmailAddress[]
}

model StripeSubscription {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    userId String? @unique
    user   User?

    subscriptionId String? @unique
    productId      String?
    priceId        String?
    customerId     String?

    currentPeriodEnd DateTime
    updatedAt        DateTime @updatedAt
}

enum Role {
    user
    admin
}

model ChatbotInteraction {
    id String @id @default(cuid())

    day   String
    count Int    @default(1)

    userId String? @unique
    user   User?   @relation(fields: [userId], references: [id])

    @@unique([day, userId])
    @@index([day, userId])
}

model Thread {
    id              String      @id @default(cuid())
    subject         String
    lastMessageDate DateTime
    participantIds  String[]
    userAccountId   String
    userAccount     UserAccount @relation(fields: [userAccountId], references: [id])

    done Boolean @default(false)

    inboxStatus Boolean @default(true)
    draftStatus Boolean @default(false)
    sentStatus  Boolean @default(false)

    emails Email[]

    @@index([userAccountId])
    @@index([done])
    @@index([inboxStatus])
    @@index([draftStatus])
    @@index([sentStatus])
    @@index([lastMessageDate])
}

model Email {
    id                String            @id @default(cuid())
    threadId          String
    thread            Thread            @relation(fields: [threadId], references: [id])
    createdTime       DateTime
    lastModifiedTime  DateTime?
    sentAt            DateTime?
    receivedAt        DateTime?
    internetMessageId String?
    subject           String
    sysLabels         String[]
    sensitivity       Sensitivity       @default(normal)
    // meetingMessageMethod MeetingMessageMethod? 
    from              EmailAddress      @relation("FromEmail", fields: [fromId], references: [id])
    fromId            String
    to                EmailAddress[]    @relation("ToEmails")
    cc                EmailAddress[]    @relation("CcEmails")
    bcc               EmailAddress[]    @relation("BccEmails")
    replyTo           EmailAddress[]    @relation("ReplyToEmails")
    hasAttachments    Boolean
    body              String?
    bodySnippet       String?
    attachments       EmailAttachment[]
    inReplyTo         String?
    references        String?
    threadIndex       String?
    // internetHeaders      Json[]
    nativeProperties  Json?
    folderId          String?
    // omitted              String[]

    emailLabel EmailLabel @default(inbox)

    @@index([threadId])
    @@index([emailLabel])
    @@index([sentAt])
}

enum EmailLabel {
    inbox
    sent
    draft
}

model EmailAddress {
    id            String  @id @default(cuid())
    name          String?
    address       String
    raw           String?
    sentEmails    Email[] @relation("FromEmail")
    receivedTo    Email[] @relation("ToEmails")
    receivedCc    Email[] @relation("CcEmails")
    receivedBcc   Email[] @relation("BccEmails")
    replyToEmails Email[] @relation("ReplyToEmails")

    UserAccount   UserAccount? @relation(fields: [userAccountId], references: [id])
    userAccountId String?

    @@unique([userAccountId, address])
}

model EmailAttachment {
    id              String  @id @default(cuid())
    name            String
    mimeType        String
    size            Int
    inline          Boolean
    contentId       String?
    content         String?
    contentLocation String?
    Email           Email   @relation(fields: [emailId], references: [id])
    emailId         String
}

enum Sensitivity {
    normal
    private
    personal
    confidential
}

enum MeetingMessageMethod {
    request
    reply
    cancel
    counter
    other
}
